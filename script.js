// –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
const audioManager = {
    currentPlaying: null,
    
    playAudio(audioElement) {
        // –ï—Å–ª–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –∏–≥—Ä–∞–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if (this.currentPlaying && this.currentPlaying !== audioElement) {
            this.currentPlaying.pause();
            this.currentPlaying.currentTime = 0;
        }
        
        this.currentPlaying = audioElement;
    }
};

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
function initScrollAnimations() {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.animation = `fadeInUp 0.8s ease-out ${entry.target.dataset.delay || '0s'} both`;
                entry.target.style.opacity = '1';
            }
        });
    }, { threshold: 0.1 });

    document.querySelectorAll('.work-card, .footer-section').forEach((el, index) => {
        el.style.opacity = '0';
        el.dataset.delay = `${index * 0.2}s`;
        observer.observe(el);
    });
}

// –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
    document.getElementById('code-tab').style.display = 'none';
    document.getElementById('music-tab').style.display = 'none';
    document.getElementById('city-tab').style.display = 'none';
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–± –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const targetTab = document.getElementById(tabName + '-tab');
    if (targetTab) {
        targetTab.style.display = 'grid';
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    if (event && event.target) {
        event.target.classList.add('active');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    setTimeout(initScrollAnimations, 100);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–æ–≤ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
function initAudioPlayers() {
    const audioPlayers = document.querySelectorAll('audio');
    audioPlayers.forEach(audio => {
        audio.controls = true;
        audio.preload = 'metadata';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
        audio.addEventListener('play', function() {
            audioManager.playAudio(this);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
        audio.addEventListener('ended', function() {
            audioManager.currentPlaying = null;
        });
    });
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞
const KALININGRAD_CONFIG = {
    lat: 54.7104,
    lon: 20.4522,
    city: "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
    timezone: "Europe/Kaliningrad"
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–≥–æ–¥—ã –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞
function updateTime() {
    const now = new Date();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ (GMT+2)
    const options = { 
        timeZone: 'Europe/Kaliningrad',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    };
    
    const timeString = now.toLocaleTimeString('ru-RU', options);
    const dateString = now.toLocaleDateString('ru-RU', {
        timeZone: 'Europe/Kaliningrad',
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
    
    const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    const dayOfWeek = days[now.getDay()];
    
    const timeElement = document.getElementById('current-time');
    const dateElement = document.getElementById('current-date');
    const dayElement = document.getElementById('day-of-week');
    
    if (timeElement) timeElement.textContent = timeString;
    if (dateElement) dateElement.textContent = dateString;
    if (dayElement) dayElement.textContent = dayOfWeek;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å OpenWeatherMap API
async function updateWeather() {
    const btn = document.querySelector('.weather-btn');
    const apiKey = 'your_api_key_here'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
    
    // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –±–µ–∑ –∫–ª—é—á–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    try {
        btn.classList.add('updating');
        btn.textContent = 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –ø–æ–≥–æ–¥—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ OpenWeatherMap —Å –∫–ª—é—á–æ–º)
        const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=54.71&longitude=20.51&current_weather=true&timezone=Europe%2FMoscow`);
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã');
        }
        
        const data = await response.json();
        
        if (data.current_weather) {
            updateWeatherUI(data.current_weather);
            showNotification('–ü–æ–≥–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        // Fallback - –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞
        updateWeatherWithDemoData();
        showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
    } finally {
        btn.classList.remove('updating');
        btn.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–≥–æ–¥—ã
function updateWeatherUI(weatherData) {
    const temp = document.getElementById('temperature');
    const condition = document.getElementById('weather-condition');
    const feels = document.getElementById('feels-like');
    const humidity = document.getElementById('humidity');
    const wind = document.getElementById('wind-speed');
    const icon = document.getElementById('weather-icon');
    
    const temperature = Math.round(weatherData.temperature);
    const windSpeed = Math.round(weatherData.windspeed);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É (WMO codes)
    const weatherInfo = getWeatherDescription(weatherData.weathercode);
    
    if (temp) temp.textContent = `${temperature}¬∞C`;
    if (condition) condition.textContent = weatherInfo.description;
    if (feels) feels.textContent = `–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${temperature}¬∞C`;
    if (wind) wind.textContent = `${windSpeed} –º/—Å`;
    if (icon) icon.textContent = weatherInfo.icon;
    
    // –í–ª–∞–∂–Ω–æ—Å—Ç—å –Ω–µ –≤ —ç—Ç–æ–º API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (humidity) humidity.textContent = `${Math.floor(Math.random() * 30) + 60}%`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É
function getWeatherDescription(weatherCode) {
    const codes = {
        0: { description: '–Ø—Å–Ω–æ', icon: '‚òÄÔ∏è' },
        1: { description: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ', icon: 'üå§Ô∏è' },
        2: { description: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', icon: '‚õÖ' },
        3: { description: '–ü–∞—Å–º—É—Ä–Ω–æ', icon: '‚òÅÔ∏è' },
        45: { description: '–¢—É–º–∞–Ω', icon: 'üå´Ô∏è' },
        48: { description: '–ò–∑–º–æ—Ä–æ–∑—å', icon: 'üå´Ô∏è' },
        51: { description: '–õ–µ–∫–∞—è –º–æ—Ä–æ—Å—å', icon: 'üå¶Ô∏è' },
        53: { description: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å', icon: 'üå¶Ô∏è' },
        55: { description: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å', icon: 'üåßÔ∏è' },
        61: { description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', icon: 'üå¶Ô∏è' },
        63: { description: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å', icon: 'üåßÔ∏è' },
        65: { description: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', icon: '‚õàÔ∏è' },
        80: { description: '–õ–∏–≤–µ–Ω—å', icon: 'üåßÔ∏è' },
        95: { description: '–ì—Ä–æ–∑–∞', icon: '‚õàÔ∏è' }
    };
    
    return codes[weatherCode] || { description: '–û–±–ª–∞—á–Ω–æ', icon: 'üå§Ô∏è' };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
function getLocationWeather() {
    if (!navigator.geolocation) {
        showNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
        return;
    }
    
    showNotification('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...');
    
    navigator.geolocation.getCurrentPosition(
        async (position) => {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;
            
            try {
                const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);
                const data = await response.json();
                
                if (data.current_weather) {
                    updateWeatherUI(data.current_weather);
                    showNotification('–ü–æ–≥–æ–¥–∞ –¥–ª—è –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏');
            }
        },
        (error) => {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
        }
    );
}

// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ API)
function updateWeatherWithDemoData() {
    const temperatures = [12, 13, 14, 15, 16, 17, 18, 19];
    const conditions = [
        { text: '–Ø—Å–Ω–æ', icon: '‚òÄÔ∏è' },
        { text: '–û–±–ª–∞—á–Ω–æ', icon: 'üå§Ô∏è' },
        { text: '–ü–∞—Å–º—É—Ä–Ω–æ', icon: '‚òÅÔ∏è' },
        { text: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', icon: 'üå¶Ô∏è' }
    ];
    
    const randomTemp = temperatures[Math.floor(Math.random() * temperatures.length)];
    const randomCondition = conditions[Math.floor(Math.random() * conditions.length)];
    const randomWind = (Math.random() * 5 + 2).toFixed(1);
    const randomHumidity = Math.floor(Math.random() * 20) + 65;
    
    const temp = document.getElementById('temperature');
    const condition = document.getElementById('weather-condition');
    const feels = document.getElementById('feels-like');
    const humidity = document.getElementById('humidity');
    const wind = document.getElementById('wind-speed');
    const icon = document.getElementById('weather-icon');
    
    if (temp) temp.textContent = `${randomTemp}¬∞C`;
    if (condition) condition.textContent = randomCondition.text;
    if (feels) feels.textContent = `–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${randomTemp}¬∞C`;
    if (humidity) humidity.textContent = `${randomHumidity}%`;
    if (wind) wind.textContent = `${randomWind} –º/—Å`;
    if (icon) icon.textContent = randomCondition.icon;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--aquamarine);
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-size: 0.9rem;
        box-shadow: 0 4px 12px rgba(42, 157, 143, 0.3);
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞
function initCityTab() {
    updateTime();
    setInterval(updateTime, 1000);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
    setTimeout(updateWeather, 500);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é showTab –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –≥–æ—Ä–æ–¥–∞
function showTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
    document.getElementById('code-tab').style.display = 'none';
    document.getElementById('music-tab').style.display = 'none';
    document.getElementById('city-tab').style.display = 'none';
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–± –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    const targetTab = document.getElementById(tabName + '-tab');
    if (targetTab) {
        targetTab.style.display = 'grid';
        
        // –ï—Å–ª–∏ —ç—Ç–æ –≤–∫–ª–∞–¥–∫–∞ –≥–æ—Ä–æ–¥–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
        if (tabName === 'city') {
            setTimeout(initCityTab, 100);
        }
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    if (event && event.target) {
        event.target.classList.add('active');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initScrollAnimations();
    initAudioPlayers();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    document.querySelectorAll('.work-card').forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const onclickAttr = this.getAttribute('onclick');
            if (onclickAttr) {
                const tabName = onclickAttr.match(/showTab\('(\w+)'\)/)[1];
                showTab(tabName);
            }
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
    showTab('code');
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
function enhanceUserExperience() {
    const elementsToAnimate = document.querySelectorAll('.hero, .portfolio');
    elementsToAnimate.forEach((el, index) => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(20px)';
        el.style.transition = `opacity 0.6s ease ${index * 0.2}s, transform 0.6s ease ${index * 0.2}s`;
        
        setTimeout(() => {
            el.style.opacity = '1';
            el.style.transform = 'translateY(0)';
        }, 100 + index * 200);
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', enhanceUserExperience);
